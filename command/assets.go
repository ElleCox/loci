// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/Dockerfile-go
// assets/Dockerfile-python
// assets/entrypoint
// assets/entrypoint-go
// assets/entrypoint-python
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x93\x51\x6f\x9b\x4a\x10\x85\xdf\xf9\x15\x23\x9c\x1b\xdd\x1b\x5d\xb3\x76\x1e\x5a\xc9\xa9\xa3\x92\x42\x5a\x9a\x1a\x10\xa1\x69\xa3\x38\x8a\x36\x30\x36\x5b\xe3\xdd\xed\xee\xda\x89\x85\xe8\x6f\xaf\x00\x37\x76\xd2\xaa\x0f\x08\x46\xf3\x9d\x33\x73\x16\xe8\x59\x3d\xf0\x44\xb6\x40\x35\x63\x25\x5a\x4d\xf9\x4e\xc8\x8d\x62\xf3\xc2\xc0\xbf\xd9\x7f\x70\x3c\x18\xbe\xea\x1f\x0f\x86\xaf\xe1\xe3\x8a\x4b\x64\x70\x41\x1f\xe8\x52\x18\xd1\xb2\x69\xc1\x34\x68\x31\x33\x0f\x54\x21\x30\x0d\x0a\x4b\xa4\x1a\x73\x58\xf1\x1c\x15\x98\x02\x61\x12\xa4\xf0\x89\x65\xc8\x35\x3a\xad\xa8\x30\x46\x8e\x08\x11\x12\xb9\x16\x2b\x95\xa1\x23\xd4\x9c\x94\x1d\xa2\xc9\x92\x99\xfe\xb6\x70\x64\x21\xad\x9e\x55\x55\x39\xce\x18\x47\xb0\xef\xa9\x46\xbb\xae\xad\xf3\x24\x9a\x40\x55\x39\x67\x54\x63\xb0\xa4\x73\xac\x6b\x6b\xe2\x06\x61\xea\x06\xa1\x9f\xbc\x5c\x15\xde\x2c\xb6\x4f\xce\xb7\xb6\xf3\x76\xbe\xa4\xac\x74\x32\xb1\x3c\xb5\x2c\x3f\xbc\x82\xd4\x4f\x26\xb0\x36\xc3\xc1\xa0\x2d\x3d\xff\x2c\x70\xc3\xbb\xf3\x24\x0a\x53\x3f\xf4\x80\x0b\xce\xb8\x41\x45\x33\xc3\xd6\x68\x55\xd5\x03\x33\x05\x38\x1f\xd2\x34\x8e\x95\x78\xdc\xd4\x75\x2b\x6b\xea\xbb\x38\x89\xbe\x5e\x37\xbb\xd5\xb5\x55\x55\xc8\xf3\xf6\xbe\x13\x5c\xbe\x54\x5c\xfe\x55\x12\x8a\x7d\x3e\x8c\xfe\x08\x3f\xd1\xae\x34\xbf\xf0\xe4\x73\x08\x98\x15\x02\x6c\x37\xfb\xbe\x62\x0a\x47\xa3\xe6\xe0\xa1\x82\x96\x80\xa9\xdd\x7a\x4c\xed\x13\xa8\x4f\x6c\x38\x3d\x05\x82\x26\x23\x54\x9a\xe6\x72\x32\xc1\x67\x4e\x4e\x06\x43\xd9\xd0\xbf\x4f\x8a\x37\x92\xed\x8f\x8a\xaf\xe3\xa0\xdb\x6d\xdc\xfa\xc2\xe1\x21\x4c\x2d\x00\x80\x20\x8e\xa3\x24\x1d\x1f\x54\x3b\xa4\x77\x44\xc8\x1e\xb1\x5c\xe4\x4c\x41\x5f\xc2\x0f\xe2\x48\x26\xc9\xae\xd3\x05\xb8\x99\x97\xe2\x9e\x96\xb7\x53\xce\x78\x8e\x8f\xfd\x95\x2a\xc7\x07\x3b\x37\xa2\x84\x30\x44\x6e\x24\x9b\x72\xa3\x56\xda\x60\xde\x2f\x84\x36\xe3\x83\xaa\x9b\xfd\xcf\xe8\xa8\x6e\x13\x6e\xfd\x25\x93\x6d\xbe\xfd\x54\xf7\xa5\xc8\x16\x60\x4b\x9a\x2d\xe8\x1c\x6d\x78\x76\xbc\x6e\xf2\x1e\xae\xfc\xe4\x32\x88\xc2\x1d\xba\x46\xa5\x99\xe0\x2f\xd0\xa7\x76\xf7\x69\x77\x5d\xd7\xf3\x9a\x37\xe6\xaa\xac\x60\x6b\xac\x6b\x20\x39\x35\xd4\xfa\x12\x25\x17\x5e\x90\x6c\xab\xdd\x34\xcf\x03\xe4\x46\x6d\xa4\x60\xdc\x38\xba\x80\x36\xa1\xe5\x87\x69\x72\x1d\x47\x41\x98\xc2\x4d\xf3\x27\x14\xf6\xff\x60\x77\xe1\x9f\xe1\xf6\xed\x93\xd7\xcf\x00\x00\x00\xff\xff\xba\xd6\xb5\x1a\xdf\x03\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerfileGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xdd\x6b\xdb\x3e\x14\x7d\xd7\x5f\x71\x71\x42\x68\x7f\x3f\x6c\xb5\x7d\xd8\xa0\xd0\x87\xb0\x94\x2c\xeb\x47\x4a\x96\x75\x0f\xdb\x28\xb7\xf2\xb5\x2d\x2a\x4b\x42\x92\x93\x05\xd7\xff\xfb\xf0\x07\x49\xa0\x1b\xf4\xc5\x58\x47\xe7\xe8\x9c\xfb\x31\x62\x23\x98\x19\xf1\x42\x2e\x93\x8a\xe2\xdc\xb0\x16\xf9\x64\xec\xce\xc9\xbc\x08\x70\x22\x4e\xe1\xe2\xec\xfc\x43\x7c\x71\x76\xfe\x11\xbe\x54\xda\x92\x84\x1b\xdc\x62\x69\x42\xcf\x5d\x17\xd2\x83\x37\x59\xd8\xa2\x23\x90\x1e\x1c\x29\x42\x4f\x29\x54\x3a\x25\x07\xa1\x20\xb8\x5b\xac\xe1\x56\x0a\xd2\x9e\x92\x4e\x54\x84\x60\x2f\x39\x37\x96\xb4\x37\x95\x13\x94\x18\x97\x73\xd5\x53\x3c\x2f\x65\x88\x87\x43\x62\x0b\xcb\x46\xac\xae\x53\xca\xa4\x26\x88\x2c\x8a\x17\xcc\x29\x6a\x1a\xb6\xfa\x76\x0f\x68\x43\x9c\x53\x80\xca\xa6\x18\x08\x26\x13\xf8\xc9\x00\x60\x8f\x4b\xed\x03\x2a\x05\xf1\xae\x83\xaa\x20\x95\x87\xdc\x28\xd4\x39\xe4\x32\x80\xa8\x9c\x82\x6d\xcb\xac\x6b\x87\x3a\x27\x48\xd6\x0e\x37\xd2\x27\xd3\x34\x35\xda\x27\x53\x1b\x92\x87\xde\xd3\x37\x0d\xd4\x75\xd2\x7d\x49\xa7\x4d\xf3\xd6\xae\xb2\xb9\xc3\x94\x5a\xbb\xc9\x64\x8f\x0a\x45\xa8\x0f\x64\x57\x42\xec\x32\xe0\x1b\x74\x5c\xa0\x28\x88\xa3\x0d\x1c\x9d\x28\xe4\x86\x3c\xff\xaf\xbf\x51\xf2\xb9\xc3\x95\xf4\xc1\x73\xc6\xae\xef\x1f\x61\xbe\x7c\x98\xae\x3f\x03\x4f\x31\x20\x63\x23\x58\x0c\xd5\xe5\xb2\x2c\xa9\xeb\x47\xf9\x92\x4a\x07\xb1\x85\x71\xcf\xe5\xcf\xf2\xc8\xb9\xab\x36\xf6\xb7\x10\x9b\x63\x02\xef\xf4\xdd\x54\xfc\x25\xe7\x0e\xb7\x49\x2e\x43\x51\x3d\x57\x9e\x9c\x30\x3a\x90\x0e\x89\x30\x25\x0f\x5d\x6b\x62\x21\x7b\x05\x2f\xd1\x07\x72\x83\xfc\xe0\x52\x94\x26\x85\xff\x7f\xbf\xb5\x60\x43\xe3\xd8\xd1\x40\x37\xe4\xbc\x34\xba\x1d\xe8\xa1\x20\x04\x6f\x49\xc8\x4c\x0a\x18\xee\xc1\x64\x30\x37\x5d\x8d\xed\x9b\x57\xd1\xf1\xe3\x97\xe3\xf6\x37\x3a\x44\xf8\x01\xe3\xc7\xeb\xd5\xd7\xc5\xf2\x1e\xae\x20\x42\xbd\x8b\xe0\x17\xbc\xbe\x02\x6d\x50\x41\x34\x3e\x99\x2f\xee\xee\xae\x9f\xe6\xcb\xa7\x81\x75\xb5\xa7\x77\x39\x4f\xa3\xbf\x25\xed\x57\xb5\x0d\x5a\xd7\x32\xdb\x2f\xca\xdc\x2c\x4a\x6b\x5c\x78\xc0\x50\x34\x0d\x9b\xce\x66\xed\x96\x4c\xfb\x71\x36\xcd\xbe\x0b\xde\x09\x5e\xd7\xff\x50\xd5\x35\x29\x4f\xef\x90\xaf\xc8\x1a\x2f\x83\x71\xbb\x5e\xd5\x85\xfc\xbe\x5c\xdd\xcc\x16\xab\x77\x71\xff\x04\x00\x00\xff\xff\x87\xb0\x1f\x84\xf3\x03\x00\x00")

func assetsDockerfileGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfileGo,
		"assets/Dockerfile-go",
	)
}

func assetsDockerfileGo() (*asset, error) {
	bytes, err := assetsDockerfileGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile-go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerfilePython = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x5f\x4f\xdb\x3e\x14\x7d\xcf\xa7\xb8\x4a\x2b\x44\x1f\x1c\xd3\xfe\x24\x7e\x12\x12\x0f\xdd\x40\xa2\x1b\x94\x0a\x0a\x12\xda\x06\x72\x93\xdb\xe4\x0a\xd7\xf6\x6c\xa7\x5d\x48\xf3\xdd\xa7\xa4\xe9\x9f\x55\x5b\x5f\x6a\x9f\x73\xee\xcd\x3d\xe7\x26\x9d\xa0\x03\x57\x3a\x7e\x47\x3b\x27\x89\xcc\x14\x3e\xd3\x2a\xa8\xd1\xcf\xda\x14\x96\xd2\xcc\xc3\x69\xdc\x83\xc1\x59\xff\x9c\x0d\xce\xfa\xff\xc3\x97\x5c\x19\x24\xf8\x2a\x56\x62\xa1\xbd\x6e\xb4\xd3\x8c\x1c\x38\x3d\xf7\x2b\x61\x11\xc8\x81\x45\x89\xc2\x61\x02\xb9\x4a\xd0\x82\xcf\x10\xee\x46\x53\xb8\xa5\x18\x95\xc3\xa8\x29\xca\xbc\x37\x17\x9c\x6b\x83\xca\xe9\xdc\xc6\x18\x69\x9b\x72\xb9\x91\x38\xbe\x20\xcf\xda\x4b\x64\x32\x13\x74\x82\xb2\x4c\x70\x4e\x0a\x21\x34\x22\x7e\x17\x29\x86\x55\x15\x74\x60\xa4\x9c\x17\x52\x82\x30\x1e\x5a\xc2\x45\xc1\xc3\xd3\xb8\x46\x58\x8a\x1e\x72\x93\x08\x8f\x70\x72\x72\x80\xa4\x56\x24\x08\xac\xa8\xd1\xef\x01\x00\xec\x38\x6a\xfb\xb1\xa2\x81\x72\x4f\xd2\xc1\x26\x98\xf6\x8f\x19\x32\x20\x2c\x89\x01\xc4\xb9\x95\xb0\xaa\xcb\x52\xf2\x6d\xa3\xbf\xfc\x3e\x24\xcd\xfa\x29\x4b\x70\x09\x92\x66\x16\x45\x22\x49\xe1\xf9\x16\x98\x7d\x0c\xb6\x47\xf7\x53\x92\xc7\xff\x76\x57\x27\xeb\x63\x50\x96\x56\xa8\x14\x21\x9a\x5a\xb1\x24\x17\x0d\x93\x44\x2b\x17\x0d\x8d\x8f\x26\xad\xe7\xaa\xfa\xc3\xf4\x81\x8d\xb2\x8c\xaa\x2a\x28\x4b\x54\x49\x55\x05\x41\x07\x9e\x36\x81\x18\x32\x4d\x49\x6d\x67\x27\x67\xdb\x6c\x6a\xf6\x20\x5e\x53\xa0\x5a\x36\xf2\xc6\x33\xbb\x6d\x16\xe8\x2e\x38\xb7\x62\x15\xa5\xe4\xb3\x7c\x96\x3b\xb4\xb1\x56\x1e\x95\x8f\x62\xbd\xe0\x45\x91\xe7\xbc\x29\x64\x6d\x7f\xb4\x7c\x21\x9c\x47\xcb\x67\xa4\x8e\x29\x58\xc3\x4c\xb8\x6c\x3f\xe9\x7e\xe3\x4b\xb4\x8e\xb4\x3a\xda\x38\x38\x83\x31\xcd\x29\xde\xee\xa7\x95\x05\xd7\xe3\x67\x98\xbc\x4c\x6f\xee\xc7\x6f\x9f\x9e\x46\xb7\x57\x6f\xc3\x87\xd1\x70\xf0\x76\x3f\x99\x3e\x42\xc8\x7e\x41\xff\x0c\xd8\x3b\xf4\xef\xc2\xc6\xd0\x64\x38\xbd\xb9\x0c\xb9\xd5\xda\xf3\xa8\x99\xa9\x9e\xee\xa2\x5b\xe3\xe1\xfe\x05\xc1\xa5\x90\x10\x76\x4f\x1b\x05\x90\x22\x0f\xac\xf7\x4f\x7e\x49\xd6\xe7\x42\x6e\x0c\x1e\x4b\x27\x2f\xcf\xd7\x0f\x8f\xa3\xfb\xf1\xe5\xbe\x5d\x9b\xbf\x84\x35\xd4\x5f\x4e\xe8\x38\x70\x9e\x86\xb0\x86\xd4\xa2\x01\x76\x0d\xe1\x6b\xb7\x2d\x3b\xed\xae\xbf\xbd\xb2\x1f\xbd\x9a\xf5\x82\x24\xb0\x7e\x6f\xdf\xfd\xa8\xa3\x03\xb6\x84\xee\xee\x91\xc7\x3a\xa9\x63\x21\x0f\xf8\x5d\xfc\xbf\x03\x00\x00\xff\xff\xcb\x2e\x6c\x9d\x1c\x04\x00\x00")

func assetsDockerfilePythonBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfilePython,
		"assets/Dockerfile-python",
	)
}

func assetsDockerfilePython() (*asset, error) {
	bytes, err := assetsDockerfilePythonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile-python", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xfe\x14\xaf\x49\x0f\x20\x6d\x93\x6d\x0f\x20\x15\x21\x21\x90\x90\x96\x3f\x17\xda\x5b\x55\x51\x27\x79\x49\x2c\xb2\xb6\x65\x3b\xdd\xae\xa2\x7c\x77\x94\x38\xb0\x40\xbb\x87\x72\xcb\xcc\xbc\x99\xdf\xcc\x8b\x87\xa1\x62\xad\x34\x91\x14\xd2\x33\x19\x47\x91\x9e\xe4\x85\xd2\x79\x21\x7d\x2b\x52\x91\x82\x3a\xb8\xbd\x35\x4a\x87\x39\xfc\x60\xec\xde\xa9\xa6\x0d\x78\x51\xbe\xc4\xc5\xfa\xfc\xd5\xd9\xc5\xfa\xfc\x35\x3e\xf5\xda\x52\xe1\xb3\xdc\xc9\xad\x09\x66\xd6\x5e\xb7\xca\xc3\x9b\x3a\xec\xa4\x23\x94\x87\x63\x47\xe9\x59\xa1\xd7\x15\x1d\x42\x4b\x7c\xdd\x5c\xe3\x8b\x2a\xa9\x3d\xb3\xb9\xa9\x0d\xc1\x5e\xe6\xb9\xb1\xd4\xde\xf4\xae\x64\x66\x5c\x93\x77\x51\xe2\xf3\xad\x0a\x67\x4b\x90\xd9\xd6\x8a\x54\x88\x14\xdf\x7a\x8d\x82\xb5\x99\x28\xda\x07\xd9\x75\xf0\x81\xd6\xaf\xfe\x0d\x17\x91\x2f\x9d\xb2\xe1\x57\x52\xea\x6a\xc9\x88\x34\xe6\xa0\x34\xc2\xb4\xbc\x71\x15\x5d\x86\x4d\x0d\xa9\xf7\xb0\xd2\xc9\x2d\x03\x9d\xc7\x74\x50\xa3\xee\xa9\x57\xe0\x03\xcb\x3e\x70\xbe\xe6\xa0\x10\xe9\xcc\xa6\xac\x32\x7c\x34\x0e\x7c\x90\x5b\xdb\x71\x85\x60\x50\xb1\xe8\x9b\x08\x88\xdc\x15\x5c\xbf\x10\x77\x2a\xb4\xb8\x9b\xdc\xbf\x83\xf4\xd3\x50\x91\x1e\xc6\xce\xbb\x36\x0c\x90\xf0\x2d\xbb\x0e\xb2\x2c\xe9\x7d\x26\x3c\x03\xce\x28\x86\xa1\xe8\x4c\xf9\x03\x09\xf5\x7d\x82\x6c\x1c\xc5\x30\x50\x57\xe3\x28\x54\x8d\x9b\x1b\x9c\xa6\x38\x79\x8b\x35\x6e\x6f\xdf\x4c\xa3\xb5\xc0\xbc\x3e\x4e\xdf\x89\x5a\x1d\xba\xad\xa3\x95\x8e\x7f\x4f\x38\x94\xa3\x8b\xdf\x17\x6f\xa3\x8a\x65\x6b\x90\xbc\x8f\xfe\x6e\x16\xd7\xaf\x26\x33\x2f\x13\x31\x0c\x4e\xea\x86\xc8\x62\x7d\x29\xff\xee\x1a\x86\x6c\x1c\x27\xd5\x9f\xb8\xc7\xd8\x27\x78\x47\x41\xff\x89\x58\x2e\x8b\x7f\xe5\x89\xc3\xae\xe2\xc3\x39\x72\x57\xac\x3e\x97\xf9\x18\x76\x8c\xf2\xcc\xf9\xf1\xe3\x67\x00\x00\x00\xff\xff\xc1\x16\xdb\x65\xe2\x03\x00\x00")

func assetsEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypoint,
		"assets/entrypoint",
	)
}

func assetsEntrypoint() (*asset, error) {
	bytes, err := assetsEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xc1\x8e\xdb\x36\x14\xbc\xf3\x2b\xa6\xd2\x02\xcd\x06\x96\x94\xa4\x40\x0b\x6c\x91\xc3\xa6\x4d\x5d\xb7\x75\xb6\x58\xbb\xb9\x04\x46\x42\x4b\x4f\x12\x11\x8a\x14\x48\xca\xbb\x86\xac\x7f\x2f\x28\x6a\x6d\xc3\xd9\x43\x6e\xe2\x70\x1e\xdf\xcc\x7b\xa3\xf8\x87\x6c\x2b\x54\xb6\xe5\xb6\x66\x31\x8b\x41\xca\x99\x7d\xab\x85\x72\x49\xa5\x47\xe4\x37\xdd\xee\x8d\xa8\x6a\x87\x17\xf9\x35\xde\xbc\x7a\xfd\x73\xf2\xe6\xd5\xeb\x5f\xf0\x57\xa7\x5a\x12\xf8\x9b\x3f\xf0\x46\xbb\xc0\x5d\xd7\xc2\xc2\xea\xd2\x3d\x70\x43\x10\x16\x86\x24\x71\x4b\x05\x3a\x55\x90\x81\xab\x09\xcb\xc5\x1a\xff\x88\x9c\x94\xa5\x74\x2c\xaa\x9d\x6b\x6f\xb2\x4c\xb7\xa4\xac\xee\x4c\x4e\xa9\x36\x55\x26\x03\xc5\x66\x8d\x70\xc9\x74\x48\xdb\xba\x65\x31\x63\x31\xee\x3b\x85\x2d\x95\xda\x77\x51\xd6\x71\x29\x61\x1d\xb5\x76\x76\x79\x9c\x48\x36\x37\xa2\x75\x4f\x20\x57\xc5\x84\xb0\x38\x60\x10\x0a\xce\x8b\xd7\xa6\x20\x93\x06\x23\xe3\x2c\x30\x0e\xe3\xe9\x81\x52\xe7\x9d\x25\x0b\xad\x60\x3a\xa5\x84\xaa\xe0\xc8\x3a\x8b\x52\x1b\x16\x63\xae\xc1\xdb\x56\x8a\x9c\x3b\xa1\x95\x4d\xb1\x28\xc1\xd5\x1e\x2d\x37\xbc\x21\x47\xc6\xc2\x0f\xa6\x12\x3b\x52\x33\xd0\x23\xe5\x9d\xa3\x71\x2a\x27\x06\x8b\x47\x0f\xc4\x8b\x14\x7f\x68\x03\x7a\xe4\x4d\x2b\x69\x06\xa7\x51\xd0\xb6\xab\x82\xd0\x20\x68\xe6\x65\x04\xe0\x41\xb8\x1a\x5f\xfc\x22\xbf\x80\x5b\xff\x28\x8b\x4f\xcf\x8e\x9e\x2b\x72\xe0\xb0\x35\x49\x09\x9e\xe7\x64\x6d\xca\xfa\xbe\xa0\x52\x28\x42\x44\x6a\x17\x0d\x03\xfb\xf7\x76\xfd\xe7\xdb\xe8\x6a\x7e\xe7\x3f\x7c\x38\x6e\xae\xfc\x57\xc4\x0a\xca\xa5\x57\x9f\x3c\x62\xbe\x58\x2e\xdf\x7f\x9e\xdf\x7d\xfe\xf8\xfe\x7e\xb5\xb8\xfb\xf0\xf6\xea\x45\x25\x9a\x86\x90\xc8\x6b\x26\x4a\x7c\xfa\x84\x44\x21\xba\xba\xe4\x45\xd8\x6c\x7e\xf5\xd2\x14\x03\x68\xc7\x25\xa2\xa9\xf2\x3a\x62\xa5\x60\x86\x78\xa1\x95\xdc\x63\x7d\x7f\xfb\x71\xb1\xba\xe8\xa0\xb1\x23\x63\x85\x56\x38\x20\xef\x1c\x92\x12\x3f\x21\x29\x10\x21\xc2\x01\x3e\x65\x36\xab\x74\x96\x55\xd7\xac\xef\x49\x15\xc3\xc0\xce\xec\x4d\xc1\xf0\x16\x29\xaf\x35\xa2\xc5\x94\x94\x95\x0f\xc0\x4d\xc4\xfa\x5e\x94\x48\x27\x74\x18\x58\xdf\x1b\xae\x2a\x3a\x87\x42\x61\xdf\xa7\xc3\xe0\xf9\xe9\xc8\x0a\x9d\xfa\x9e\xa4\xa5\x23\xa7\xd2\xe3\xb4\x13\x87\x34\x4b\xd3\x34\x62\x17\xc0\x79\xdd\xa5\xd2\xb0\xda\x93\xd0\x55\xc8\xde\x49\x67\xf6\x12\xa2\x7c\x8a\xa4\xb0\xea\x47\x17\x22\xd5\xa0\xb3\x84\x86\x7f\x25\xe8\xf0\xb3\x15\x54\xf2\x4e\x3a\x54\x5a\xf2\x29\xab\xc8\x75\xd3\x70\x55\xa4\x78\x99\x8d\xfd\xbd\xeb\xd0\xe2\xdc\xf4\x11\xf9\x1e\xcf\xd3\xca\x09\xf3\x0f\xff\x2d\xf9\x57\x2a\x85\x24\x6c\x36\x38\x1c\x26\xfc\x59\xf0\xdd\xea\xf7\xe6\x39\xfc\x0c\x3c\x86\xc5\x63\xcc\x77\x63\x40\x90\x3c\xd7\xef\x3a\x21\x8b\x5b\x53\xd9\x61\x60\x40\xa5\x83\xbd\xbe\xff\xe6\xea\xa8\xf3\xc4\x4a\x76\xd3\x1e\xc6\xdb\xd1\x4d\x29\xbe\x59\xca\xff\x01\x00\x00\xff\xff\x1a\xdd\x71\xb5\x1e\x05\x00\x00")

func assetsEntrypointGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointGo,
		"assets/entrypoint-go",
	)
}

func assetsEntrypointGo() (*asset, error) {
	bytes, err := assetsEntrypointGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint-go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointPython = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x61\x6b\xdb\x48\x14\xfc\xbe\xbf\x62\x4e\x0a\x21\x01\x4b\x4a\xf2\xe1\x0e\x72\xe4\xc3\x71\xa4\xd4\x6d\xd3\x86\xc4\x14\x4a\x1a\xc8\x5a\x7a\x92\x16\xe4\xb7\xdb\xdd\x27\xc7\x46\xe8\xbf\x97\x95\xed\xa4\xa4\xfd\x24\x76\x76\x34\x33\x6f\xf6\xa5\x7f\x15\x4b\xc3\xc5\x52\x87\x56\xa5\x2a\x05\xb1\xf8\xad\xb3\x86\x25\x73\x5b\x69\x2d\x4f\xe8\xff\xd6\x6d\xbd\x69\x5a\xc1\x49\x79\x8a\x8b\xb3\xf3\xbf\xb3\x8b\xb3\xf3\x7f\xf0\xa1\x67\x47\x06\x1f\xf5\xb3\x5e\x59\xb1\x13\x77\xd1\x9a\x80\x60\x6b\x79\xd6\x9e\x60\x02\x3c\x75\xa4\x03\x55\xe8\xb9\x22\x0f\x69\x09\x37\xf3\x05\x3e\x99\x92\x38\x50\x3e\xfd\xd4\x8a\xb8\xcb\xa2\xb0\x8e\x38\xd8\xde\x97\x94\x5b\xdf\x14\xdd\x8e\x12\x8a\x95\x91\x6c\x7f\xc8\x5d\xeb\x54\xaa\x54\x8a\xbb\x9e\xb1\xa4\xda\x46\x17\x0e\xa2\xbb\x0e\x41\xc8\x85\xd9\xdb\xe3\x9e\x14\x4a\x6f\x9c\x1c\x40\xcd\xd5\x1e\x51\xe9\x0e\x83\x61\x48\x0c\x6f\x7d\x45\x3e\xdf\x0d\x32\xf5\x81\xa9\x90\x83\x40\x6d\xcb\x3e\x50\x80\x65\xf8\x9e\xd9\x70\x03\xa1\x20\x01\xb5\xf5\x2a\xc5\xed\x54\x1b\xb4\x73\x9d\x29\xb5\x18\xcb\x21\xc7\xbc\x86\xe6\x2d\x9c\xf6\x7a\x45\x42\x3e\x20\x96\xd3\x98\x35\xf1\x0c\xb4\xa1\xb2\x17\x9a\x9a\x79\x65\xa8\x74\x9a\x83\x74\x95\xe3\x9d\xf5\xa0\x8d\x5e\xb9\x8e\x66\x10\x8b\x8a\x96\x7d\xb3\x0b\xbb\x0b\x35\x8b\x51\x76\xc0\xb3\x91\x16\x4f\xf1\x41\x9f\xa0\x43\x14\x55\xe9\xab\xec\x34\x77\x43\x02\x8d\xd0\x52\xd7\x41\x97\x25\x85\x90\xab\x61\xa8\xa8\x36\x4c\x48\x88\xd7\xc9\x38\xaa\xdb\xff\x16\xef\xaf\x92\xc2\x5b\x2b\x45\xee\xb6\xc4\xeb\xb8\x29\x97\x47\x11\x4f\x14\xad\x75\x87\xe4\xe8\x64\xba\x80\x61\x23\xc8\x4e\x13\x1c\x1f\xe3\xfb\x9b\xbb\xb5\xf1\xd2\xeb\x8e\x78\x9d\x1d\x68\x6a\x18\x88\xab\x71\x54\xbf\xb8\x3a\x4f\x4e\x7b\x8a\xce\x8b\xeb\xbb\x9b\xab\x8d\x90\x5f\x29\x4f\xba\xb2\xdc\x6d\x71\xfb\xed\xeb\xf5\xdd\xfd\xfc\xcb\xe7\xab\x83\x6e\x67\x4b\xdd\x9d\xfe\x49\x6a\xff\xfc\x51\x8a\xca\xd6\x22\x99\xef\xf7\xe1\x3e\x3e\xf3\x65\xa2\x4c\x8d\x87\x07\x64\x04\x4f\x3f\x7a\xe3\x69\x45\x2c\x21\x97\x8d\xe0\xf1\xf1\xdf\xd8\x18\x2b\xc0\x19\xf7\xb2\x48\x99\xff\x8d\xaa\x6a\xa3\x86\xc1\x6b\x6e\x08\xf9\xde\xe0\xc5\x70\x18\xf2\x71\x8c\x63\xe6\xe3\xf8\x92\xf0\xf0\xfd\x19\x00\x00\xff\xff\xb0\x40\x7a\x46\x73\x03\x00\x00")

func assetsEntrypointPythonBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointPython,
		"assets/entrypoint-python",
	)
}

func assetsEntrypointPython() (*asset, error) {
	bytes, err := assetsEntrypointPythonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint-python", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/Dockerfile-go": assetsDockerfileGo,
	"assets/Dockerfile-python": assetsDockerfilePython,
	"assets/entrypoint": assetsEntrypoint,
	"assets/entrypoint-go": assetsEntrypointGo,
	"assets/entrypoint-python": assetsEntrypointPython,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"Dockerfile-go": &bintree{assetsDockerfileGo, map[string]*bintree{}},
		"Dockerfile-python": &bintree{assetsDockerfilePython, map[string]*bintree{}},
		"entrypoint": &bintree{assetsEntrypoint, map[string]*bintree{}},
		"entrypoint-go": &bintree{assetsEntrypointGo, map[string]*bintree{}},
		"entrypoint-python": &bintree{assetsEntrypointPython, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

